buildscript {
  dependencies {
    classpath "org.flywaydb:flyway-database-postgresql:11.10.5"
  }
}

plugins {
  id 'application'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.springframework.boot' version '3.5.4'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.flywaydb.flyway' version '11.1.1'
  id 'org.sonarqube' version '6.2.0.5505'
  /*
    Applies analysis tools including checkstyle and OWASP Dependency checker.
    See https://github.com/hmcts/gradle-java-plugin
 */
  id 'uk.gov.hmcts.java' version '0.12.67'
}

application {
  mainClass = 'uk.gov.hmcts.reform.laubackend.eud.Application'
  group = 'uk.gov.hmcts.reform'
  version = '0.0.1'
}

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

def configureSourceSet(String name) {
  sourceSets.create(name) { sourceSet ->
    sourceSet.java {
      compileClasspath += sourceSets.main.output + sourceSets.test.output
      runtimeClasspath += sourceSets.main.output + sourceSets.test.output
      srcDir "src/${name}/java"
    }
    sourceSet.resources.srcDir "src/${name}/resources"
  }
}

['smokeTest', 'integrationTest', 'functionalTest'].each { configureSourceSet(it) }

configurations {
  functionalTestImplementation.extendsFrom testImplementation
  functionalTestRuntimeOnly.extendsFrom runtimeOnly

  integrationTestImplementation.extendsFrom testImplementation
  integrationTestRuntimeOnly.extendsFrom runtimeOnly

  smokeTestImplementation.extendsFrom testImplementation
  smokeTestRuntimeOnly.extendsFrom runtimeOnly
}

tasks.withType(JavaCompile).configureEach {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

// https://github.com/gradle/gradle/issues/16791
tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

tasks.withType(Test).configureEach {
  useJUnitPlatform()
  failFast = true

  testLogging {
    exceptionFormat = 'full'
  }
}

tasks.register('functional', Test) {
  description = "Runs functional tests"
  group = "Verification"
  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

tasks.register('integration', Test) {
  description = "Runs integration tests"
  group = "Verification"
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  failFast = true
}

tasks.register('smoke', Test) {
  description = "Runs Smoke Tests"
  group = "Verification"
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

task fortifyScan(type: JavaExec)  {
  mainClass = "uk.gov.hmcts.fortifyclient.FortifyClientMainApp"
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.getRequired().set(true)
    csv.getRequired().set(false)
    html.getRequired().set(true)
  }
}

tasks.sonarqube.dependsOn(jacocoTestReport)
tasks.check.dependsOn(integration)

sonarqube {
  properties {
    property "sonar.projectName", "Reform :: lau-eud-backend"
    property "sonar.projectKey", "uk.gov.hmcts.reform:lau-eud-backend"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  suppressionFile = 'config/owasp/suppressions.xml'
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url = uri('https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1')
  }
}

def versions = [
  flywaydb          : '11.11.0',
]

ext {
  log4JVersion = "2.25.1"
  logbackVersion = "1.5.18"
}

ext['snakeyaml.version'] = '2.0'

dependencies {
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: '6.1.9'
  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version:'11.0.10'
  implementation group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version:'11.0.10'

  implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: log4JVersion
  implementation group: 'org.apache.logging.log4j', name: 'log4j-to-slf4j', version: log4JVersion
  implementation group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
  implementation group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flywaydb
  implementation group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flywaydb

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.6'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.10', classifier: 'all'
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')

  if (System.getenv("LAU_EUD_DB_PASSWORD")) {
    placeholders = [
      'LAU_EUD_DB_PASSWORD': System.getenv("LAU_EUD_DB_PASSWORD")
    ]
  }

  baselineOnMigrate = true
  baselineVersion = '000'
}

import org.flywaydb.gradle.task.FlywayMigrateTask
task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}

bootJar {
  archiveFileName = "lau-eud-backend.jar"

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

// Gradle 7.x issue, workaround from: https://github.com/gradle/gradle/issues/17236#issuecomment-894768083
rootProject.tasks.named("processSmokeTestResources") {
  duplicatesStrategy = 'include'
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}
